(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{615:function(t,a,r){"use strict";r.r(a);var _=r(5),v=Object(_.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"title"}),r("p",[t._v("设计模式---七大设计原则")])]),r("h2",{attrs:{id:"设计模式-简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式-简介"}},[t._v("#")]),t._v(" 设计模式---简介")]),t._v(" "),r("h3",{attrs:{id:"_1-介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-介绍"}},[t._v("#")]),t._v(" 1.  介绍")]),t._v(" "),r("p",[t._v("设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。")]),t._v(" "),r("p",[t._v("设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。")]),t._v(" "),r("h3",{attrs:{id:"_2-分类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-分类"}},[t._v("#")]),t._v(" 2.  分类")]),t._v(" "),r("p",[t._v("设计模式总共有23种，这些可以分为三大类：创建型模式、结构型模式、行为型模式。")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",{staticStyle:{"text-align":"center"}},[t._v("模式")]),t._v(" "),r("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),r("th",[t._v("包括")])])]),t._v(" "),r("tbody",[r("tr",[r("td",{staticStyle:{"text-align":"center"}},[r("div",{staticStyle:{width:"50px"}},[t._v("创建型模式")])]),t._v(" "),r("td",{staticStyle:{"text-align":"left"}},[t._v("这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。")]),t._v(" "),r("td",[r("div",{staticStyle:{width:"200px"}},[r("br"),t._v("工厂模式"),r("br"),t._v("抽象工厂模式"),r("br"),t._v("单例模式"),r("br"),t._v("建造者模式"),r("br"),t._v("原型模式")])])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("结构型模式")]),t._v(" "),r("td",{staticStyle:{"text-align":"left"}},[t._v("这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。")]),t._v(" "),r("td",[r("div",{staticStyle:{width:"200px"}},[r("br"),t._v("适配器模式"),r("br"),t._v("桥接模式"),r("br"),t._v("过滤器模式"),r("br"),t._v("组合模式"),r("br"),t._v("装饰器模式"),r("br"),t._v("外观模式"),r("br"),t._v("亨元模式"),r("br"),t._v("代理模式")])])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("行为型模式")]),t._v(" "),r("td",{staticStyle:{"text-align":"left"}},[t._v("这些设计模式特别关注对象之间的通信。")]),t._v(" "),r("td",[r("div",{staticStyle:{width:"200px"}},[r("br"),t._v("责任链模式"),r("br"),t._v("命令模式"),r("br"),t._v("解释器模式"),r("br"),t._v("迭代器模式"),r("br"),t._v("中介者模式"),r("br"),t._v("备忘录模式"),r("br"),t._v("观察者模式"),r("br"),t._v("状态模式"),r("br"),t._v("空对象模式"),r("br"),t._v("策略模式"),r("br"),t._v("模板模式"),r("br"),t._v("访问者模式")])])])])]),t._v(" "),r("h3",{attrs:{id:"_3-常用的七大原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-常用的七大原则"}},[t._v("#")]),t._v(" 3.  常用的七大原则")]),t._v(" "),r("ul",[r("li",[r("h6",{attrs:{id:"单一职责原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单一职责原则"}},[t._v("#")]),t._v(" 单一职责原则")]),t._v(" "),r("p",[t._v("对类来说的，即一个类只负责一项职责。如A类负责两个不同的职责：职责1、职责2。当职责需求变更而改变A时，可能会造成职责2执行错误，所有要讲类A的粒度分解为A1、A2。")])]),t._v(" "),r("li",[r("h6",{attrs:{id:"接口隔离原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#接口隔离原则"}},[t._v("#")]),t._v(" 接口隔离原则")]),t._v(" "),r("p",[t._v("使用多个隔离的接口，比使用单个接口要好。（降低类之前的耦合度）")])]),t._v(" "),r("li",[r("h6",{attrs:{id:"依赖倒转-倒置-原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#依赖倒转-倒置-原则"}},[t._v("#")]),t._v(" 依赖倒转（倒置）原则")])]),t._v(" "),r("li",[r("h6",{attrs:{id:"里氏替换原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#里氏替换原则"}},[t._v("#")]),t._v(" 里氏替换原则")])]),t._v(" "),r("li",[r("h6",{attrs:{id:"开闭原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则"}},[t._v("#")]),t._v(" 开闭原则")]),t._v(" "),r("p",[r("code",[t._v("对扩展开放，对修改关闭。")]),t._v("在程序需要进行拓展的时候，不能去修改原有代码，实现一个热插拔的效果")])]),t._v(" "),r("li",[r("h6",{attrs:{id:"迪米特法则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#迪米特法则"}},[t._v("#")]),t._v(" 迪米特法则")])]),t._v(" "),r("li",[r("h6",{attrs:{id:"合成复用原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#合成复用原则"}},[t._v("#")]),t._v(" 合成复用原则")])])])])}),[],!1,null,null,null);a.default=v.exports}}]);